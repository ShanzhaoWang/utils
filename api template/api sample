# This script perform query to Openspecimen and output to tab delimited file
#
# Further info regarding Openspecimen query via API:
# https://openspecimen.atlassian.net/wiki/spaces/CAT/pages/104529939/Query
# https://openspecimen.atlassian.net/wiki/spaces/CAT/pages/110264471/How+to+design+and+run+queries+programmatically+using+AQL
#
# This script needs to be modified inorder to change the query. 
# Please do the following steps
# 1. Create the desired query using the Openspecimen web interface. 
# 2. Once you are satisfied with the query results, do the following
#    a. open the network tab in browser's developer tools, network panel
#    b. rerun the query; you will notice a couple of API calls made to the 
#       resource /query using HTTP POST method - one call for obtaining 
#       the counts and another to obtain the data for display in grid 
#    c. the POST request body will have the required AQL for use in running the 
#       queries programmatically; copy (with some modification) the POST 
#       request body to the "aql" definition below.
#
# try use API to export data ...
library(xlsx)
library(osAPI)

# please enter the output folder
OUTPUT_DIR <- ""

OS_USERNAME <- readline(prompt="Openspecimen (dev) username: ") # asks for username
OS_PASSWORD <- readline(prompt="Openspecimen (dev) password: ") # asks for password

# connect ...
os_conn <- OsAPI$new() # connection to OVGTB
os_conn$connect(
  os_url= "https://os-ovcare-dev.bcchr.ca/openspecimen/rest/ng",
  username=OS_USERNAME,
  password=OS_PASSWORD,
  domain="Openspecimen",  # Openspecimen login domain ... no need to change
  bank_cp_name=" ", # BCGP collection protocol name ... may need to change
  clin_cp_name=" "  # BCGP collection protocol name ... may need to change
)

# enter the POST request body content from browser's developer tools network panel 
aql <- paste0(
  "select ",
  # the following are fields to retrieve
  "Participant.gender, ",
  "Participant.dateOfBirth, ",
  "Participant.deathDate, ",
  "Participant.vitalStatus, ",
  "Participant.activityStatus, ",
  "SpecimenCollectionGroup.clinicalStatus, ",
  "Specimen.label, ",
  "Specimen.type, ",
  "Specimen.tissueSite, ",
  "Specimen.lineage, ",
  "Specimen.class, ",
  "Specimen.tissueSide, ",
  "Specimen.createdOn, ",
  "Specimen.initialQty, ",
  "Specimen.availableQty, ",
  "Specimen.collectionStatus, ",
  "Specimen.comments, ",
  "CollectionProtocol.Title, ",
  "CollectionProtocol.irbIdentifier, ",
  "CollectionProtocol.cpSites.siteName ",
  
  # the following specifies the selection/filter criteria
  "where  ",
  "Specimen.id exists  and  Specimen.label ends with \"N1\" and  Specimen.type = \"Urine\" and  Specimen.spmnCollRecvDetails.collTime > \"01-01-2014\""
)

print(Sys.time())
row_index <- 0
row_incr <- 500
out_d <- os_conn$aql(paste0(aql," limit ",row_index,", ",row_incr))
row_fetched <- nrow(out_d)
while(row_index < 70000000 &  # some big number so that the loop must end
      row_fetched==row_incr   # if row_fetched < row_incr that means no more rows could be retrieved
      ) {
  row_index <- row_index+row_incr
  if (row_index%%5000==0) {
    cat("retrieving row #:",row_index,"\n")
  }
  new_d <- os_conn$aql(paste0(aql," limit ",format(row_index,scientific=FALSE),", ",row_incr))
  row_fetched <- nrow(new_d)
  if (row_fetched >0) {
    out_d <- rbind(
      out_d,
      new_d
    )
  }
}
cat("finished!!!\n")

print(Sys.time())

# write. to file
out_fname <- file.path(OUTPUT_DIR,paste0("bcgp_v4_n",nrow(out_d),"_",format(Sys.Date(),format="%Y-%m-%d"),".txt"))
write.table(out_d,out_fname,col.names=TRUE,row.names=FALSE,sep="\t")
